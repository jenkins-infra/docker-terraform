// buildDockerAndPublishImage('terraform', [mainBranch: 'main'])
import java.text.SimpleDateFormat;
import java.util.Date;

if (!config.registry) {
  if (infra.isTrusted() || infra.isInfra()) {
    config.registry = "jenkinsciinfra/"
  } else {
    config.registry = "jenkins4eval/"
  }
}

if (!config.dockerfile) {
  config.dockerfile = "Dockerfile"
}

if (!config.credentials) {
  config.credentials = "jenkins-dockerhub"
}

if (!config.mainBranch) {
  config.mainBranch = "master"
}

pipeline {
  agent {
    kubernetes {
      label 'build-publish-docker'
      inheritFrom 'jnlp-linux'
      yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
  annotations:
    container.apparmor.security.beta.kubernetes.io/img: unconfined
    container.seccomp.security.alpha.kubernetes.io/img: unconfined
spec:
  tolerations:
  - key: "os"
    operator: "Equal"
    value: "linux"
    effect: "NoSchedule"
  - key: "profile"
    operator: "Equal"
    value: "highmem"
    effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/os
            operator: In
            values:
            - linux
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: agentpool
            operator: In
            values:
            - highmemlinux
  restartPolicy: "Never"
  containers:
    - name: img
      image: r.j3ss.co/img:v0.5.11
      command:
      - cat
      tty: true
    - name: cst
      image: gcr.io/gcp-runtimes/container-structure-test:v1.9.1
      command:
      - cat
      tty: true
    - name: hadolint
      image: hadolint/hadolint
      command:
      - cat
      tty: true
        '''
    }
  }

  environment {
    BUILD_DATE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX").format(new Date())
    IMAGE_NAME = "${config.registry}${imageName}"
    DOCKERFILE = "${config.dockerfile}"
    USE_DOCKER = "false"
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    timeout(time: 60, unit: "MINUTES")
    ansiColor("xterm")
  }

  stages {
    stage("Lint") {
      steps {
        container('hadolint') {
          script {
            writeFile(file: 'hadolint.json', text: sh(returnStdout: true, script: '/bin/hadolint --format json $DOCKERFILE || true').trim())
            recordIssues(tools: [hadoLint(pattern: 'hadolint.json')])
          }
        }
      }
    }
    stage("Build") {
      steps {
        container('img') {
          sh 'make build'
        }
      }
    }
    stage("Test") {
      steps {
        container('img') {
          sh 'make test'
        }
      }
    }
  }
}
